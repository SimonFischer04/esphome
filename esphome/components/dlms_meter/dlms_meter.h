#pragma once

#include "esphome/core/component.h"
#include "esphome/core/defines.h"
#include "esphome/components/sensor/sensor.h"
#include "esphome/components/text_sensor/text_sensor.h"
#include "esphome/components/uart/uart.h"

#if defined(ESP32)
#include "mbedtls/gcm.h"
#endif

#include <vector>

static const char *const DLMS_METER_VERSION = "0.9.1";
static const char *const TAG = "dlms_meter";

namespace esphome {
namespace dlms_meter {

// DLMS_METER_**_LIST generated by ESPHome and written in esphome/core/defines

#if !defined(DLMS_METER_SENSOR_LIST) && !defined(DLMS_METER_TEXT_SENSOR_LIST)
// Neither set, set it to a dummy value to not break build
#define DLMS_METER_TEXT_SENSOR_LIST(F, SEP) F(identification)
#endif

#if defined(DLMS_METER_SENSOR_LIST) && defined(DLMS_METER_TEXT_SENSOR_LIST)
#define DLMS_METER_BOTH ,
#else
#define DLMS_METER_BOTH
#endif

#ifndef DLMS_METER_SENSOR_LIST
#define DLMS_METER_SENSOR_LIST(F, SEP)
#endif

#ifndef DLMS_METER_TEXT_SENSOR_LIST
#define DLMS_METER_TEXT_SENSOR_LIST(F, SEP)
#endif

#define DLMS_METER_DATA_SENSOR(s) s
#define DLMS_METER_COMMA ,

class DlmsMeterComponent : public Component, public uart::UARTDevice {
 public:
  DlmsMeterComponent() = default;
  ;

  void setup() override;
  void dump_config() override;
  void loop() override;

  void set_voltage_sensors(sensor::Sensor *voltage_l1, sensor::Sensor *voltage_l2, sensor::Sensor *voltage_l3);
  void set_current_sensors(sensor::Sensor *current_l1, sensor::Sensor *current_l2, sensor::Sensor *current_l3);

  void set_active_power_sensors(sensor::Sensor *active_power_plus, sensor::Sensor *active_power_minus);
  void set_active_energy_sensors(sensor::Sensor *active_energy_plus, sensor::Sensor *active_energy_minus);
  void set_reactive_energy_sensors(sensor::Sensor *reactive_energy_plus, sensor::Sensor *reactive_energy_minus);
  void set_timestamp_sensor(text_sensor::TextSensor *timestamp);
  void set_evnspecial_sensor(sensor::Sensor *power_factor, text_sensor::TextSensor *meternumber);
  // void enable_mqtt(mqtt::MQTTClientComponent *mqtt_client, const char *topic);

  void set_key(uint8_t key[], size_t keyLength);

#define DLMS_METER_PUBLISH_SENSOR(s) \
  if (this->s_##s##_ != nullptr) \
    s_##s##_->publish_state(data.s);

#define DLMS_METER_PUBLISH_TEXT_SENSOR(s) \
  if (this->s_##s##_ != nullptr) \
    s_##s##_->publish_state(data.s.c_str());

  DLMS_METER_SENSOR_LIST(SUB_SENSOR, )
  SUB_SENSOR(TEEST)

 private:
  std::vector<uint8_t> receiveBuffer;  // Stores the packet currently being received
  unsigned long lastRead = 0;          // Timestamp when data was last read
  int readTimeout = 100;               // Time to wait after last byte before considering data complete

  uint8_t key[16];   // Stores the decryption key
  size_t keyLength;  // Stores the decryption key length (usually 16 bytes)

  const char *topic;  // Stores the MQTT topic

#if defined(ESP32)
  mbedtls_gcm_context aes;  // AES context used for decryption
#endif

  sensor::Sensor *voltage_l1 = NULL;  // Voltage L1
  sensor::Sensor *voltage_l2 = NULL;  // Voltage L2
  sensor::Sensor *voltage_l3 = NULL;  // Voltage L3

  sensor::Sensor *current_l1 = NULL;  // Current L1
  sensor::Sensor *current_l2 = NULL;  // Current L2
  sensor::Sensor *current_l3 = NULL;  // Current L3

  sensor::Sensor *active_power_plus = NULL;   // Active power taken from grid
  sensor::Sensor *active_power_minus = NULL;  // Active power put into grid

  sensor::Sensor *active_energy_plus = NULL;   // Active energy taken from grid
  sensor::Sensor *active_energy_minus = NULL;  // Active energy put into grid

  sensor::Sensor *reactive_energy_plus = NULL;   // Reactive energy taken from grid
  sensor::Sensor *reactive_energy_minus = NULL;  // Reactive energy put into grid

  text_sensor::TextSensor *timestamp = NULL;  // Text sensor for the timestamp value

  // EVN Special
  sensor::Sensor *power_factor = NULL;          // Power Factor
  text_sensor::TextSensor *meternumber = NULL;  // Text sensor for the meterNumber value

  // mqtt::MQTTClientComponent *mqtt_client = NULL;

  uint16_t swap_uint16(uint16_t val);
  uint32_t swap_uint32(uint32_t val);
  void log_packet(std::vector<uint8_t> data);
  void abort();
};

}  // namespace dlms_meter
}  // namespace esphome
